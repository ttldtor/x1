# SPDX-License-Identifier: BSL-1.0+ OR BlueOak-1.0.0+

name: CMake + Conan (GCC 10)

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CC: gcc-10
  CXX: g++-10

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    # Install conan
    - name: Get Conan
      uses: turtlebrowser/get-conan@v1.0
      
      # Install dependencies in the same build folder as will be used in CMake. This path also will be used for CMake's find_package() mode
      # via CMAKE_MODULE_PATH and CMAKE_PREFIX_PATH.
    - name: Install dependencies
      run: conan install . --build=missing -if ${{github.workspace}}/build -s build_type=${{env.BUILD_TYPE}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # Also set PREFIX and MODULE paths for find_package() via CMAKE_MODULE_PATH and CMAKE_PREFIX_PATH variables.
      # See https://cmake.org/cmake/help/latest/command/find_package.html?highlight=find_package for search modes.
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH=${{github.workspace}}/build -DCMAKE_MODULE_PATH=${{github.workspace}}/build

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
